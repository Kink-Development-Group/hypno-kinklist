name: Build and Deploy

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --run

      - name: Build project
        run: npm run build

      - name: Debug Build Output
        run: |
          echo "üîç Debug: Checking build process results..."
          echo "üîç Current working directory:"
          pwd
          echo "üîç Current directory contents:"
          ls -la
          echo "üîç Checking for common build directories:"
          for dir in "build" "dist" "out" "public"; do
            if [ -d "./$dir" ]; then
              echo "‚úÖ Found ./$dir directory:"
              ls -la "./$dir" || echo "‚ùå Cannot list contents of ./$dir"
            else
              echo "‚ùå ./$dir directory does not exist"
            fi
          done
          echo "üîç Searching for index.html files:"
          find . -name "index.html" -type f 2>/dev/null || echo "‚ùå No index.html files found"
          echo "üîç Searching for any HTML files:"
          find . -name "*.html" -type f 2>/dev/null || echo "‚ùå No HTML files found"

      - name: Validate build artifacts
        id: build_check
        run: |
          echo "üîç Validating build artifacts..."
          echo "üîç Current directory structure:"
          find . -maxdepth 2 -type d | head -20
          
          # Check which directory actually exists and contains files
          BUILD_DIR=""
          if [ -d "./dist" ] && [ "$(ls -A ./dist 2>/dev/null)" ]; then
            echo "‚úÖ Found dist directory with contents"
            BUILD_DIR="./dist"
          elif [ -d "./build" ] && [ "$(ls -A ./build 2>/dev/null)" ]; then
            echo "‚úÖ Found build directory with contents"
            BUILD_DIR="./build"
          elif [ -d "./out" ] && [ "$(ls -A ./out 2>/dev/null)" ]; then
            echo "‚úÖ Found out directory with contents"
            BUILD_DIR="./out"
          else
            echo "‚ùå No build output directory found with contents!"
            echo "üîç Available directories in current path:"
            ls -la
            echo "üîç Searching for any build-related directories:"
            find . -maxdepth 2 -type d -name "*build*" -o -name "*dist*" -o -name "*out*" 2>/dev/null || echo "No build directories found"
            echo "üîç Checking package.json for build script:"
            grep -A 5 -B 5 "build" package.json 2>/dev/null || echo "Could not read package.json"
            exit 1
          fi
          
          # Validate index.html exists
          if [ ! -f "$BUILD_DIR/index.html" ]; then
            echo "‚ùå index.html not found in $BUILD_DIR!"
            echo "üîç Contents of $BUILD_DIR:"
            ls -la "$BUILD_DIR/"
            echo "üîç Looking for any HTML files in $BUILD_DIR:"
            find "$BUILD_DIR" -name "*.html" -type f 2>/dev/null || echo "No HTML files found"
            exit 1
          fi
            echo "‚úÖ Build artifacts validated successfully"
          echo "üìã Build directory: $BUILD_DIR"
          echo "üìã Build contents:"
          ls -la "$BUILD_DIR/"
          
          # Get file size in a cross-platform way
          INDEX_SIZE=""
          if command -v stat >/dev/null 2>&1; then
            # Try BSD stat first (macOS), then GNU stat (Linux)
            INDEX_SIZE=$(stat -f%z "$BUILD_DIR/index.html" 2>/dev/null || stat -c%s "$BUILD_DIR/index.html" 2>/dev/null || echo 'unknown')
          else
            INDEX_SIZE="unknown"
          fi
          echo "üìã index.html size: ${INDEX_SIZE} bytes"
          
          # Export build directory for use in deployment steps
          echo "build_dir=$BUILD_DIR" >> $GITHUB_OUTPUT
          echo "source_path=${BUILD_DIR}/*" >> $GITHUB_OUTPUT

      - name: Set deployment target based on branch
        id: deployment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "target_dir=${{ secrets.SFTP_REMOTE_DIR_PROD }}" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "target_dir=${{ secrets.SFTP_REMOTE_DIR_DEV }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Verify deployment configuration
        id: config_check
        run: |
          echo "üîç Verifying deployment configuration..."
          echo "Branch: ${{ github.ref }}"
          echo "Environment: ${{ steps.deployment.outputs.environment }}"
          echo "Target directory: ${{ steps.deployment.outputs.target_dir }}"
          
          # Check if required secrets are available (without exposing values)
          MISSING_SECRETS=""
          
          if [ -z "${{ secrets.SFTP_HOST }}" ]; then
            echo "‚ùå SFTP_HOST secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS SFTP_HOST"
          else
            echo "‚úÖ SFTP_HOST is configured"
          fi
          
          if [ -z "${{ secrets.SFTP_USER }}" ]; then
            echo "‚ùå SFTP_USER secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS SFTP_USER"
          else
            echo "‚úÖ SFTP_USER is configured"
          fi
          
          if [ -z "${{ secrets.SFTP_PASS }}" ]; then
            echo "‚ùå SFTP_PASS secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS SFTP_PASS"
          else
            echo "‚úÖ SFTP_PASS is configured"
          fi
          
          if [ -z "${{ secrets.SFTP_PORT }}" ]; then
            echo "‚ùå SFTP_PORT secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS SFTP_PORT"
          else
            echo "‚úÖ SFTP_PORT is configured"
          fi
          
          if [ -z "${{ steps.deployment.outputs.target_dir }}" ]; then
            echo "‚ùå Target directory not set for this branch"
            MISSING_SECRETS="$MISSING_SECRETS TARGET_DIR"
          else
            echo "‚úÖ Target directory is configured"
          fi
            # If any secrets are missing, skip deployment gracefully
          if [ -n "$MISSING_SECRETS" ]; then
            echo "‚ö†Ô∏è Deployment will be skipped due to missing configuration:"
            echo "   Missing: $MISSING_SECRETS"
            echo "‚ö†Ô∏è Please configure the required GitHub secrets in repository settings."
            echo "‚ö†Ô∏è See DEPLOYMENT.md and PIPELINE_TROUBLESHOOTING.md for more information."
            echo "‚ö†Ô∏è This is not an error - the workflow will complete successfully."
            echo "skip_deployment=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "‚úÖ All deployment configuration verified"
            echo "skip_deployment=false" >> $GITHUB_OUTPUT
          fi

      - name: Verbose SSH Connection Test
        if: steps.config_check.outputs.skip_deployment == 'false'
        run: |
          echo "üîç Testing SSH connection with verbose output..."
          echo "Host: ${{ secrets.SFTP_HOST }}"
          echo "Port: ${{ secrets.SFTP_PORT }}"
          echo "User: ${{ secrets.SFTP_USER }}"
          
          # Install sshpass if not available
          sudo apt-get update -qq && sudo apt-get install -y sshpass
          
          # Create a temporary SSH config for verbose testing
          mkdir -p ~/.ssh
          echo "Host testhost" > ~/.ssh/config
          echo "  HostName ${{ secrets.SFTP_HOST }}" >> ~/.ssh/config
          echo "  Port ${{ secrets.SFTP_PORT }}" >> ~/.ssh/config
          echo "  User ${{ secrets.SFTP_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
            # Test connection with timeout and better error handling
          echo "üîç Attempting verbose SSH connection test..."
          set +e  # Don't exit on error for this test
          timeout 30 sshpass -p "${{ secrets.SFTP_PASS }}" ssh -v testhost "echo 'SSH connection test successful'" 2>&1
          SSH_TEST_RESULT=$?
          set -e  # Re-enable exit on error
          
          if [ $SSH_TEST_RESULT -eq 0 ]; then
            echo "‚úÖ SSH connection test passed"
          else
            echo "‚ùå SSH connection test failed (exit code: $SSH_TEST_RESULT)"
            echo "This might be due to:"
            echo "  - Incorrect host/port/credentials"
            echo "  - Network connectivity issues" 
            echo "  - Server configuration problems"
            echo "  - SSH server not responding to test commands"
            echo "Continuing to attempt deployment via action..."
          fi

      - name: Verify SSH Authentication
        if: steps.config_check.outputs.skip_deployment == 'false'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USER }}
          password: ${{ secrets.SFTP_PASS }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            echo "‚úÖ SSH Authentication successful!"
            echo "üîç Server information:"
            echo "  - Hostname: $(hostname)"
            echo "  - User: $(whoami)"
            echo "  - Current directory: $(pwd)"
            echo "  - Available space: $(df -h . | tail -1 | awk '{print $4}')"

      - name: Create target directory via SSH
        if: steps.config_check.outputs.skip_deployment == 'false'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USER }}
          password: ${{ secrets.SFTP_PASS }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            mkdir -p ${{ steps.deployment.outputs.target_dir }}
            chmod 755 ${{ steps.deployment.outputs.target_dir }}

      - name: Deploy to SFTP (${{ steps.deployment.outputs.environment }})
        if: steps.config_check.outputs.skip_deployment == 'false'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SFTP_HOST }}
          port: ${{ secrets.SFTP_PORT }}
          username: ${{ secrets.SFTP_USER }}
          password: ${{ secrets.SFTP_PASS }}
          source: "${{ steps.build_check.outputs.source_path }}"
          target: ${{ steps.deployment.outputs.target_dir }}
          strip_components: 1
          overwrite: true
          rm: true

      - name: Cleanup and set permissions
        if: steps.config_check.outputs.skip_deployment == 'false'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USER }}
          password: ${{ secrets.SFTP_PASS }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            find ${{ steps.deployment.outputs.target_dir }} -type f -name "*.html" -exec chmod 644 {} \;
            find ${{ steps.deployment.outputs.target_dir }} -type f -name "*.js" -exec chmod 644 {} \;
            find ${{ steps.deployment.outputs.target_dir }} -type f -name "*.css" -exec chmod 644 {} \;
            find ${{ steps.deployment.outputs.target_dir }} -type d -exec chmod 755 {} \;

      - name: Verify deployment
        if: steps.config_check.outputs.skip_deployment == 'false'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USER }}
          password: ${{ secrets.SFTP_PASS }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            echo "üîç Verifying deployment in: ${{ steps.deployment.outputs.target_dir }}"
            ls -la "${{ steps.deployment.outputs.target_dir }}"
            if [ -f "${{ steps.deployment.outputs.target_dir }}/index.html" ]; then
              echo "‚úÖ Deployment successful - index.html found"
            else
              echo "‚ùå Deployment failed - index.html not found"
              exit 1
            fi

      - name: Deployment success notification
        if: steps.config_check.outputs.skip_deployment == 'false'
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Environment: ${{ steps.deployment.outputs.environment }}"
          echo "Target directory: ${{ steps.deployment.outputs.target_dir }}"
          echo "Build directory used: ${{ steps.build_check.outputs.build_dir }}"

      - name: Deployment skipped notification
        if: steps.config_check.outputs.skip_deployment == 'true'
        run: |
          echo "‚ö†Ô∏è Deployment was skipped due to missing configuration."
          echo "üìã Please check the 'Verify deployment configuration' step for details."
          echo "üìã Configure the required GitHub secrets to enable deployment."
          echo "üìñ See DEPLOYMENT.md and PIPELINE_TROUBLESHOOTING.md for setup instructions."
